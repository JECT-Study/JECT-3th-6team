name: Gemini Code Review

on:
  pull_request:
    branches:
      - develop
    types: [opened, synchronize]
    paths:
      - 'backend/**'

jobs:
  code-review:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install GoogleGenerativeAI
        run: |
          npm install @google/generative-ai

      - name: Get git diff for PR (Backend only)
        run: |
          git fetch origin "${{ github.event.pull_request.base.ref }}"
          git fetch origin "${{ github.event.pull_request.head.ref }}"
          git diff "origin/${{ github.event.pull_request.base.ref }}"..."origin/${{ github.event.pull_request.head.ref }}" -- backend/ > diff.txt
          
          # diff가 비어있으면 스킵
          if [ ! -s diff.txt ]; then
            echo "No backend changes detected, skipping review"
            echo "SKIP_REVIEW=true" >> $GITHUB_ENV
          else
            echo "Backend changes detected, proceeding with review"
            echo "SKIP_REVIEW=false" >> $GITHUB_ENV
          fi

      - name: Run Gemini Review
        if: env.SKIP_REVIEW == 'false'
        id: gemini_review
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require("fs");
            const diff_output = fs.readFileSync("diff.txt", "utf8");

            // diff가 너무 크면 요약
            if (diff_output.length > 50000) {
              console.log("Diff is too large, creating summary...");
              const lines = diff_output.split('\n');
              const summary = lines.slice(0, 1000).join('\n') + '\n\n... (diff truncated due to size)';
              fs.writeFileSync("diff.txt", summary);
            }

            const { GoogleGenerativeAI } = require("@google/generative-ai");
            const genAI = new GoogleGenerativeAI("${{ secrets.GEMINI_API_KEY }}");
            const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });

            const prompt = `
              You are a senior backend software engineer.
              
              Your task is to perform a **high-level code review** based on the provided git diff.
              Although you should analyze the code **class-by-class or file-by-file**,
              you must still point out important issues within the internal logic of each class.
            
              Please focus on the following aspects:
              - Class and function responsibilities (e.g., SRP violations, overly large methods)
              - Structure and separation of concerns
              - Maintainability and performance (e.g., tight coupling, redundant logic)
              - Security implications (e.g., missing input validation, exposure of sensitive data)
              - Internal implementation issues (e.g., missing null checks, unclear variable names)
              
              **Ignore** the following:
              - Unnecessary code comments
              - Styling or formatting issues (e.g., spaces, indentation)
            
              **Requirements**:
              - Write your review response in **Korean** only
              - Use **Markdown** format
              - Clearly mention class or method names where applicable
              - Do **not** include any intro or outro — just the review content
              - Focus on actionable feedback and specific improvements
  
              Below is the git diff:
  
              <git diff>
              ${diff_output}
              </git diff>
              `;
  
            try {
              const result = await model.generateContent(prompt);
              const response = await result.response;
              const text = response.text();
              
              fs.writeFileSync("review_result.txt", text);
              console.log("Review results saved!");
            } catch (error) {
              console.error("Error during Gemini review:", error);
              const errorMessage = `## Code Review Error\n\nAn error occurred during Gemini API call: ${error.message}`;
              fs.writeFileSync("review_result.txt", errorMessage);
            }

      - name: Comment on Pull Request
        if: env.SKIP_REVIEW == 'false'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require("fs");
            const body = fs.readFileSync("review_result.txt", "utf8");
            
            const pr_number = context.payload.pull_request.number;
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            
            // Delete existing bot comments
            const comments = await github.rest.issues.listComments({
              owner,
              repo,
              issue_number: pr_number
            });
            
            for (const comment of comments.data) {
              if (comment.user.type === 'Bot' && comment.body.includes('## 🤖 Gemini Code Review')) {
                await github.rest.issues.deleteComment({
                  owner,
                  repo,
                  comment_id: comment.id
                });
              }
            }
            
            // Create new comment
            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number: pr_number,
              body: `## 🤖 Gemini Code Review\n\n${body}`
            });

      - name: Skip Review Comment
        if: env.SKIP_REVIEW == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const pr_number = context.payload.pull_request.number;
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            
            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number: pr_number,
              body: "## 🤖 Gemini Code Review\n\nNo backend code changes detected, skipping review."
            });
