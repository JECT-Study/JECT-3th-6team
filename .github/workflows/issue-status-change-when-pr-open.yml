name: 'Update Linked Issue Status via API'

on:
  pull_request:
    types: [opened, reopened, synchronize]

permissions:
  pull-requests: read
  issues: read
  contents: read

jobs:
  update_issue_project_status:
    name: Update Issue Status in Project
    runs-on: ubuntu-latest
    steps:
      - name: Get PR Info and Extract Linked Issues
        id: extract_issues
        run: |
          PR_BODY='${{ github.event.pull_request.body }}'
          echo "PR Body: $PR_BODY"
          
          # PR 본문에서 연결된 이슈 번호 추출 (closes, fixes, resolves 키워드 사용)
          LINKED_ISSUES=$(echo "$PR_BODY" | grep -oiE "(closes?|fixes?|resolves?) #([0-9]+)" | grep -oE "#[0-9]+" | sed 's/#//' | tr '\n' ',' | sed 's/,$//')
          echo "Linked issues: $LINKED_ISSUES"
          echo "LINKED_ISSUES=$LINKED_ISSUES" >> $GITHUB_ENV  
      - name: Update project status using GitHub API
        uses: actions/github-script@v7
        # env: # 이전 스텝에서 설정한 GITHUB_ENV를 사용하기 위해 명시
        #   LINKED_ISSUES: ${{ env.LINKED_ISSUES }}
        with:
          script: |
              // ------------------- CONFIGURATION -------------------
              // ❗️ 아래 변수들을 사용자의 환경에 맞게 수정하세요.
              const PROJECT_OWNER = 'JECT-Study';
              const PROJECT_NUMBER = 18;
              const STATUS_FIELD_NAME = 'Status';
              const TARGET_STATUS_VALUE = '코드 리뷰 중';
              // -----------------------------------------------------
  
              // ⬇️ ---------- 수정된 부분 시작 ---------- ⬇️
  
              // 이전 스텝에서 설정한 환경 변수(LINKED_ISSUES)를 가져옵니다.
              const linkedIssuesEnv = "${{ env.LINKED_ISSUES }}";
              if (!linkedIssuesEnv) {
                core.info("No linked issues found from the previous step (LINKED_ISSUES env var is empty). Skipping.");
                return;
              }
  
              // 쉼표로 구분된 문자열을 숫자 배열로 변환합니다.
              const issueNumbers = linkedIssuesEnv.split(',').map(s => parseInt(s.trim(), 10)).filter(n => !isNaN(n));
              
              if (issueNumbers.length === 0) {
                core.info("No valid issue numbers found to process. Skipping.");
                return;
              }
  
              core.info(`Found linked issue(s): ${issueNumbers.join(', ')}`);
  
              // ⬆️ ---------- 수정된 부분 끝 ---------- ⬆️
  
              // GraphQL 쿼리: 프로젝트의 필드 정보는 한 번만 가져옵니다.
              const projectDataResponse = await github.graphql(`
                query getProjectFields($org: String!, $projectNumber: Int!) {
                  organization(login: $org) {
                    projectV2(number: $projectNumber) {
                      id
                      fields(first: 20) {
                        nodes {
                          ... on ProjectV2SingleSelectField {
                            id
                            name
                            options {
                              id
                              name
                            }
                          }
                        }
                      }
                    }
                  }
                }`,
                { org: PROJECT_OWNER, projectNumber: PROJECT_NUMBER }
              );
  
              const project = projectDataResponse.user.projectV2;
              if (!project) {
                return core.setFailed(`Project not found for owner ${PROJECT_OWNER} and number ${PROJECT_NUMBER}`);
              }
              const statusField = project.fields.nodes.find(field => field.name === STATUS_FIELD_NAME);
              if (!statusField) {
                return core.setFailed(`Status field "${STATUS_FIELD_NAME}" not found in project.`);
              }
              const statusOption = statusField.options.find(option => option.name === TARGET_STATUS_VALUE);
              if (!statusOption) {
                return core.setFailed(`Status value "${TARGET_STATUS_VALUE}" not found in the "${STATUS_FIELD_NAME}" field.`);
              }
  
              const projectId = project.id;
              const statusFieldId = statusField.id;
              const statusOptionId = statusOption.id;
  
              // 각 이슈에 대해 순차적으로 상태 변경을 시도합니다.
              for (const issueNumber of issueNumbers) {
                try {
                  core.info(`--- Processing issue #${issueNumber} ---`);
  
                  // 이슈의 Node ID 가져오기
                  const issueResponse = await github.graphql(`
                    query getIssueID($owner: String!, $repo: String!, $issueNumber: Int!) {
                      repository(owner: $owner, name: $repo) {
                        issue(number: $issueNumber) {
                          id
                        }
                      }
                    }`,
                    { owner: context.repo.owner, repo: context.repo.repo, issueNumber: issueNumber }
                  );
  
                  const issueId = issueResponse.repository.issue.id;
                  if (!issueId) {
                    core.warning(`Issue #${issueNumber} not found or has been deleted. Skipping.`);
                    continue;
                  }
  
                  // GraphQL 뮤테이션: 이슈를 프로젝트에 추가하고 상태를 업데이트합니다.
                  await github.graphql(`
                    mutation updateIssueStatus($projectId: ID!, $issueId: ID!, $statusFieldId: ID!, $statusOptionId: String!) {
                      addProjectV2ItemById(input: {projectId: $projectId, contentId: $issueId}) {
                        item {
                          id
                        }
                      }
                      updateProjectV2ItemFieldValue(input: {
                        projectId: $projectId,
                        itemId: $issueId,
                        fieldId: $statusFieldId,
                        value: { singleSelectOptionId: $statusOptionId }
                      }) {
                        projectV2Item {
                          id
                        }
                      }
                    }`,
                    { projectId, issueId, statusFieldId, statusOptionId }
                  );
  
                  core.info(`Successfully updated issue #${issueNumber} status to "${TARGET_STATUS_VALUE}".`);
                } catch (error) {
                  core.error(`Failed to process issue #${issueNumber}: ${error.message}`);
                }
              }