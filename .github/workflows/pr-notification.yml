name: PR Notification

on:
  pull_request:
    types: [opened, reopened, synchronize]

env:
  jjeongsu: ${{secrets.JJEONGSU_DISCORD_ID}}
  kimhyunjee: ${{secrets.KIMHYUNJEE_DISCORD_ID}}
  robinjoon: ${{secrets.ROBINJON_DISCORD_ID}}
  sangxxjin: ${{secrets.SANGXXJIN_DISCORD_ID}}

jobs:
  notify-discord:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Get Assignees
        id: assignees
        run: |
          # PR 작성자의 Discord ID 설정
          echo "ASSIGNEE_DISCORD_ID=${{ env[github.event.pull_request.assignee.login] }}" >> $GITHUB_ENV
          echo "REVIEWERS=${{ join(github.event.pull_request.requested_reviewers.*.login, ',') }}" >> $GITHUB_ENV
          echo "PR_BODY=${{ github.event.pull_request.body }}" >> $GITHUB_ENV

      - name: Get PR information
        id: pr_info
        uses: actions/github-script@v7
        with:
          script: |
            const pr_body = "${{ env.PR_BODY }}";
            const reviewDueDateKey = "- 리뷰 요청 기한:";
            const mergeDueDateKey = "- 머지 예정일:";
            let reviewDueDate = "Not set";
            let mergeDueDate = "Not set";
            const reviewDueDateStartIndex = prBodyContent.indexOf(reviewDueDateKey);
            if (reviewDueDateStartIndex !== -1) {
                // "리뷰 요청 기한:" 다음부터 줄바꿈 또는 다음 키워드까지 추출
                const substringAfterReviewKey = prBodyContent.substring(reviewDueDateStartIndex + reviewDueDateKey.length).trimStart();
                // 날짜 형식 (YYYY-MM-DD)을 찾는 정규식
                const dateMatch = substringAfterReviewKey.match(/^\s*(\d{4}-\d{2}-\d{2})/);
                if (dateMatch && dateMatch[1]) {
                    reviewDueDate = dateMatch[1];
                }
            }

            const mergeDueDateStartIndex = prBodyContent.indexOf(mergeDueDateKey);
            if (mergeDueDateStartIndex !== -1) {
                // "머지 예정일:" 다음부터 줄바꿈 또는 다음 키워드까지 추출
                const substringAfterMergeKey = prBodyContent.substring(mergeDueDateStartIndex + mergeDueDateKey.length).trimStart();
                // 날짜 형식 (YYYY-MM-DD)을 찾는 정규식
                const dateMatch = substringAfterMergeKey.match(/^\s*(\d{4}-\d{2}-\d{2})/);
                if (dateMatch && dateMatch[1]) {
                    mergeDueDate = dateMatch[1];
                }
            }

            return reviewDueDate + "," + mergeDueDate;
          result-encoding: string

      - name: Send Discord notification
        uses: actions/github-script@v7
        with:
          script: |
            // 환경 변수에 정의된 Discord ID 매핑 객체 생성
            const discordIdMap = {
              jjeongsu: "${{env.jjeongsu}}",
              kimhyunjee: "${{env.kimhyunjee}}",
              robinjoon: "${{env.robinjoon}}",
              sangxxjin: "${{env.sangxxjin}}",
              // 필요하다면 다른 팀원들의 ID도 여기에 추가
            };

            // 모든 요청된 리뷰어 멘션 생성
            const requestedReviewers = "${{ env.REVIEWERS }}";
            const requestedReviewersArray = requestedReviewers.split(',');
            
            let reviewerMentions = '';
            if (requestedReviewersArray && requestedReviewersArray.length > 0) {
              reviewerMentions = requestedReviewersArray.map(reviewer => {
                const discordId = discordIdMap[reviewer];
                return discordId ? `<@${discordId}>` : `**@${reviewer.login}** (Discord ID not found)`;
              }).join(', ');
            } else {
              reviewerMentions = '리뷰어 없음';
            }

            const authorMention = `<@${{env.ASSIGNEE_DISCORD_ID}}>`;

            // 리뷰 요청 메시지 구성
            let reviewRequestValue = '';
            if (reviewerMentions === '리뷰어 없음') {
                reviewRequestValue = `${authorMention}님의 새로운 PR이 등록되었습니다.`;
            } else {
                reviewRequestValue = `${reviewerMentions}님 ${authorMention}의 리뷰 요청이 있습니다.`;
            }
            
            const dates = "${{ steps.pr_info.outputs.result }}";
            const reviewDueDate = dates.split(",")[0];
            const mergeDueDate = dates.split(",")[1];

            const message = {
              embeds: [{
                title: "${{ github.event.pull_request.title }}",
                url: "${{ github.event.pull_request.html_url }}",
                color: 0x5865F2,
                fields: [
                  {
                    name: 'Review Request',
                    value: `${reviewerMentions}님 ${authorMention}의 리뷰 요청이 있습니다.`
                  },
                  {
                    name: 'Review Due Date',
                    value: reviewDueDate
                  },
                  {
                    name: 'Merge Due Date',
                    value: mergeDueDate
                  }
                ]
              }]
            };
            
            await fetch(process.env.DISCORD_WEBHOOK_URL, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify(message),
            });
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}