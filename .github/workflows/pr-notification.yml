name: PR Notification

on:
  pull_request:
    types: [opened, reopened, synchronize]

env:
  jjeongsu: ${{secrets.JJEONGSU_DISCORD_ID}}
  kimhyunjee: ${{secrets.KIMHYUNJEE_DISCORD_ID}}
  robinjoon: ${{secrets.ROBINJON_DISCORD_ID}}
  sangxxjin: ${{secrets.SANGXXJIN_DISCORD_ID}}


jobs:
  notify-discord:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Get Assignees
        id: assignees
        run: |
          # PR 작성자의 Discord ID 설정
          echo "ASSIGNEE_DISCORD_ID=${{ env[github.event.pull_request.assignee.login] }}" >> $GITHUB_ENV
          echo "REVIEWERS=${{ join(github.event.pull_request.requested_reviewers.*.login, ',') }}" >> $GITHUB_ENV
          echo "${{env.REVIEWERS}}"

      - name: Get PR information
        id: pr_info
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            
            // Get project information using GraphQL API
            const query = `
              query($owner: String!, $repo: String!, $prNumber: Int!) {
                repository(owner: $owner, name: $repo) {
                  pullRequest(number: $prNumber) {
                    projectItems(first: 1) {
                      nodes {
                        project {
                          title
                        }
                        fieldValues(first: 10) {
                          nodes {
                            ... on ProjectV2ItemFieldDateValue {
                              date
                              field {
                                ... on ProjectV2Field {
                                  name
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            `;
            
            const variables = {
              owner: context.repo.owner,
              repo: context.repo.repo,
              prNumber: pr.number
            };
            
            const response = await github.graphql(query, variables);
            const projectItem = response.repository.pullRequest.projectItems.nodes[0];
            
            if (!projectItem) {
              return {
                review_due_date: 'Not set',
                merge_due_date: 'Not set'
              };
            }
            
            const fields = projectItem.fieldValues.nodes;
            const reviewDueDate = fields.find(field => 
              field?.field?.name === '리뷰 마감일'
            )?.date || 'Not set';
            
            const mergeDueDate = fields.find(field => 
              field?.field?.name === '머지 예정일'
            )?.date || 'Not set';
            
            return {
              review_due_date: reviewDueDate,
              merge_due_date: mergeDueDate
            };

      - name: Send Discord notification
        uses: actions/github-script@v7
        with:
          script: |
            // 환경 변수에 정의된 Discord ID 매핑 객체 생성
            const discordIdMap = {
              jjeongsu: "${{env.jjeongsu}}",
              kimhyunjee: "${{env.kimhyunjee}}",
              robinjoon: "${{env.robinjoon}}",
              sangxxjin: "${{env.sangxxjin}}",
              // 필요하다면 다른 팀원들의 ID도 여기에 추가
            };

            // 모든 요청된 리뷰어 멘션 생성
            const requestedReviewers = "${{ env.REVIEWERS }}";
            const requestedReviewersArray = requestedReviewers.split(',');
            
            let reviewerMentions = '';
            if (requestedReviewersArray && requestedReviewersArray.length > 0) {
              reviewerMentions = requestedReviewersArray.map(reviewer => {
                const discordId = discordIdMap[reviewer];
                return discordId ? `<@${discordId}>` : `**@${reviewer.login}** (Discord ID not found)`;
              }).join(', ');
            } else {
              reviewerMentions = '리뷰어 없음';
            }

            const authorMention = `<@${{env.ASSIGNEE_DISCORD_ID}}>`;

            // 리뷰 요청 메시지 구성
            let reviewRequestValue = '';
            if (reviewerMentions === '리뷰어 없음') {
                reviewRequestValue = `${authorMention}님의 새로운 PR이 등록되었습니다.`;
            } else {
                reviewRequestValue = `${reviewerMentions}님 ${authorMention}의 리뷰 요청이 있습니다.`;
            }
            
            const message = {
              embeds: [{
                title: "${{ github.event.pull_request.title }}",
                url: "${{ github.event.pull_request.html_url }}",
                color: 0x5865F2,
                fields: [
                  {
                    name: 'Review Request',
                    value: `${reviewerMentions}님 ${authorMention}의 리뷰 요청이 있습니다.`
                  },
                  {
                    name: 'Review Due Date',
                    value: '${{ steps.pr_info.outputs.review_due_date }}'
                  },
                  {
                    name: 'Merge Due Date',
                    value: '${{ steps.pr_info.outputs.merge_due_date }}'
                  }
                ]
              }]
            };
            
            await fetch(process.env.DISCORD_WEBHOOK_URL, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify(message),
            });
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}