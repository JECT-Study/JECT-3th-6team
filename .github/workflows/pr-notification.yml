name: PR Notification

on:
  pull_request:
    types: [opened, reopened, synchronize]

jobs:
  notify-discord:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get PR information
        id: pr_info
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            
            // Get project information using GraphQL API
            const query = `
              query($owner: String!, $repo: String!, $prNumber: Int!) {
                repository(owner: $owner, name: $repo) {
                  pullRequest(number: $prNumber) {
                    projectItems(first: 1) {
                      nodes {
                        project {
                          title
                        }
                        fieldValues(first: 10) {
                          nodes {
                            ... on ProjectV2ItemFieldDateValue {
                              date
                              field {
                                ... on ProjectV2Field {
                                  name
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            `;
            
            const variables = {
              owner: context.repo.owner,
              repo: context.repo.repo,
              prNumber: pr.number
            };
            
            const response = await github.graphql(query, variables);
            const projectItem = response.repository.pullRequest.projectItems.nodes[0];
            
            if (!projectItem) {
              return {
                review_due_date: 'Not set',
                merge_due_date: 'Not set'
              };
            }
            
            const fields = projectItem.fieldValues.nodes;
            const reviewDueDate = fields.find(field => 
              field?.field?.name === '리뷰 마감일'
            )?.date || 'Not set';
            
            const mergeDueDate = fields.find(field => 
              field?.field?.name === '머지 예정일'
            )?.date || 'Not set';
            
            return {
              review_due_date: reviewDueDate,
              merge_due_date: mergeDueDate
            };

      - name: Send Discord notification
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            const author = pr.user.login;
            const reviewers = pr.requested_reviewers.map(r => r.login);
            
            // Get GitHub to Discord ID mapping from secrets
            let idMapping = {};
            let authorReviewerMapping = {};
            
            console.log('USERNAME_DISCORD_MAPPING:', process.env.USERNAME_DISCORD_MAPPING);
            try {
              if (!process.env.USERNAME_DISCORD_MAPPING) {
                throw new Error('USERNAME_DISCORD_MAPPING 시크릿이 설정되지 않았습니다.');
              }
              idMapping = JSON.parse(process.env.USERNAME_DISCORD_MAPPING);
              if (typeof idMapping !== 'object' || idMapping === null) {
                throw new Error('USERNAME_DISCORD_MAPPING이 올바른 JSON 객체가 아닙니다.');
              }
            } catch (error) {
              console.error('시크릿 파싱 에러:', error.message);
              throw new Error(`시크릿 파싱 에러: ${error.message}`);
            }
            
            console.log('AUTHOR_REVIEWER_MAPPING:', process.env.AUTHOR_REVIEWER_MAPPING);
            try {
              if (!process.env.AUTHOR_REVIEWER_MAPPING) {
                throw new Error('AUTHOR_REVIEWER_MAPPING 시크릿이 설정되지 않았습니다.');
              }
              authorReviewerMapping = JSON.parse(process.env.AUTHOR_REVIEWER_MAPPING);
              if (typeof authorReviewerMapping !== 'object' || authorReviewerMapping === null) {
                throw new Error('AUTHOR_REVIEWER_MAPPING이 올바른 JSON 객체가 아닙니다.');
              }
            } catch (error) {
              console.error('시크릿 파싱 에러:', error.message);
              throw new Error(`시크릿 파싱 에러: ${error.message}`);
            }
            
            // Set PR author as assignee
            await github.rest.issues.addAssignees({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr.number,
              assignees: [author]
            });
            
            // Get Discord IDs
            const authorDiscordId = idMapping[author] || author;
            let reviewerDiscordIds;
            
            if (reviewers.length > 0) {
              // 명시적으로 지정된 리뷰어가 있는 경우
              reviewerDiscordIds = reviewers.map(r => idMapping[r] || r);
            } else {
              // 리뷰어가 지정되지 않은 경우, 작성자별 기본 리뷰어 사용
              const defaultReviewer = authorReviewerMapping[author];
              if (!defaultReviewer) {
                throw new Error(`${author}님의 기본 리뷰어가 설정되지 않았습니다.`);
              }
              reviewerDiscordIds = [idMapping[defaultReviewer] || defaultReviewer];
              
              // 기본 리뷰어를 PR에 자동으로 지정
              await github.rest.pulls.requestReviewers({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pr.number,
                reviewers: [defaultReviewer]
              });
            }
            
            const reviewerMentions = reviewerDiscordIds.map(id => `<@${id}>`).join(', ');
            const authorMention = `<@${authorDiscordId}>`;
            
            const message = {
              embeds: [{
                title: pr.title,
                url: pr.html_url,
                color: 0x5865F2,
                fields: [
                  {
                    name: 'Review Request',
                    value: `${reviewerMentions}님 ${authorMention}의 리뷰 요청이 있습니다.`
                  },
                  {
                    name: 'Review Due Date',
                    value: '${{ steps.pr_info.outputs.review_due_date }}'
                  },
                  {
                    name: 'Merge Due Date',
                    value: '${{ steps.pr_info.outputs.merge_due_date }}'
                  }
                ]
              }]
            };
            
            await fetch(process.env.DISCORD_WEBHOOK_URL, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify(message),
            });
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
          USERNAME_DISCORD_MAPPING: ${{ secrets.USERNAME_DISCORD_MAPPING }}
          AUTHOR_REVIEWER_MAPPING: ${{ secrets.AUTHOR_REVIEWER_MAPPING }} 