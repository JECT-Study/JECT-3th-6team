name: PR Notification

on:
  pull_request:
    types: [opened, reopened, synchronize]

env:
  jjeongsu: ${{secrets.JJEONGSU_DISCORD_ID}}
  kimhyunjee: ${{secrets.KIMHYUNJEE_DISCORD_ID}}
  robinjoon: ${{secrets.ROBINJON_DISCORD_ID}}
  sangxxjin: ${{secrets.SANGXXJIN_DISCORD_ID}}

jobs:
  notify-discord:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Get Assignees
        id: assignees
        run: |
          # PR 작성자의 Discord ID 설정
          echo "ASSIGNEE_DISCORD_ID=${{ env[github.event.pull_request.assignee.login] }}" >> $GITHUB_ENV
          echo "REVIEWERS=${{ join(github.event.pull_request.requested_reviewers.*.login, ',') }}" >> $GITHUB_ENV

          # PR 본문을 쉘 변수로 가져옵니다.
          PR_BODY="${{ github.event.pull_request.body }}"

          # "리뷰 요청 기한:" 라인을 찾아 콜론(:)을 기준으로 두 번째 필드를 가져오고, 앞뒤 공백을 제거합니다.
          REVIEW_DEADLINE=$(echo "$PR_BODY" | grep "리뷰 요청 기한:" | sed 's/.*리뷰 요청 기한:\s*//' | tr -d '\n\r' | xargs)
          
          # "머지 예정일:" 라인을 찾아 동일한 작업을 수행합니다.
          MERGE_DATE=$(echo "$PR_BODY" | grep "머지 예정일:" | sed 's/.*머지 예정일:\s*//' | tr -d '\n\r' | xargs)

          # 후속 스텝에서 사용할 수 있도록 환경 변수로 설정합니다.
          # 이 방법은 동일한 Job 내의 다음 스텝들에게 환경 변수를 전달하는 표준 방식입니다.
          echo "REVIEW_DEADLINE=${REVIEW_DEADLINE}" >> $GITHUB_ENV
          echo "MERGE_SCHEDULE_DATE=${MERGE_DATE}" >> $GITHUB_ENV
          
          echo "파싱된 리뷰 기한: ${REVIEW_DEADLINE}"
          echo "파싱된 머지 예정일: ${MERGE_DATE}"
      
      - name: Update status to "코드 리뷰 중"
        uses: nipe0324/update-project-v2-item-field@v2.0.2
        with:
          project-url: https://github.com/orgs/JECT-Study/projects/18
          github-token: ${{ secrets.UPDATE_PROJECT_V2_PAT }}
          field-name: "Status"
          field-value: "코드 리뷰 중"

      - name: Update review deadline
        uses: nipe0324/update-project-v2-item-field@v2.0.2
        with:
          project-url: https://github.com/orgs/JECT-Study/projects/18
          github-token: ${{ secrets.UPDATE_PROJECT_V2_PAT }}
          field-name: "리뷰 마감일"
          field-value: "${{ env.REVIEW_DEADLINE }}"

      - name: Update merge schedule date
        uses: nipe0324/update-project-v2-item-field@v2.0.2
        with:
          project-url: https://github.com/orgs/JECT-Study/projects/18
          github-token: ${{ secrets.UPDATE_PROJECT_V2_PAT }}
          field-name: "작업 완료/머지 예정일"
          field-value: "${{ env.MERGE_SCHEDULE_DATE }}"

      - name: Send Discord notification
        uses: actions/github-script@v7
        with:
          script: |
            // 환경 변수에 정의된 Discord ID 매핑 객체 생성
            const discordIdMap = {
              jjeongsu: "${{env.jjeongsu}}",
              kimhyunjee: "${{env.kimhyunjee}}",
              robinjoon: "${{env.robinjoon}}",
              sangxxjin: "${{env.sangxxjin}}",
              // 필요하다면 다른 팀원들의 ID도 여기에 추가
            };

            // 모든 요청된 리뷰어 멘션 생성
            const requestedReviewers = "${{ env.REVIEWERS }}";
            const requestedReviewersArray = requestedReviewers.split(',');
            
            let reviewerMentions = '';
            if (requestedReviewersArray && requestedReviewersArray.length > 0) {
              reviewerMentions = requestedReviewersArray.map(reviewer => {
                const discordId = discordIdMap[reviewer];
                return discordId;
              }).filter(id => id != null).map(id => `<@${id}>`).join(', ');
            } else {
              reviewerMentions = '리뷰어 없음';
            }

            const authorMention = `<@${{env.ASSIGNEE_DISCORD_ID}}>`;

            // 리뷰 요청 메시지 구성
            let reviewRequestValue = '';
            if (reviewerMentions === '리뷰어 없음' || reviewerMentions === '') {
                reviewRequestValue = `${authorMention}님의 새로운 PR이 등록되었습니다.`;
            } else {
                reviewRequestValue = `${reviewerMentions}님 ${authorMention}의 리뷰 요청이 있습니다.`;
            }

            const message = {
              username: "코드리뷰 해주세요",
              avatar_url: "https://cdn.discordapp.com/avatars/1374003366165872650/c65b1980f3d7a99efdedf866d593b94f.webp?size=160",
              embeds: [{
                title: "${{ github.event.pull_request.title }}",
                url: "${{ github.event.pull_request.html_url }}",
                color: 0x5865F2,
                fields: [
                  {
                    name: 'Review Request',
                    value: reviewRequestValue
                  },
                  {
                    name: 'Review Due Date',
                    value: '${{ env.REVIEW_DEADLINE }}',
                  },
                  {
                    name: 'Merge Due Date',
                    value: '${{ env.MERGE_SCHEDULE_DATE }}',
                  }
                ]
              }]
            };
            
            await fetch(process.env.DISCORD_WEBHOOK_URL, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify(message),
            });
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}