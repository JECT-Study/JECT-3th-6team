name: Deploy Backend to EC2

on:
  push:
    branches:
      - develop
    paths:
      - 'backend/**'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: spotit-backend
  PROJECT_NAME: spotit

jobs:
  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Set up Gradle
        uses: gradle/actions/setup-gradle@v3

      - name: Build with Gradle
        run: ./gradlew build -x test
        working-directory: ./backend

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.UPDATE_PROJECT_V2_PAT }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

      - name: Deploy on EC2
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          port: 22
          script: |
            cd /home/${{ secrets.EC2_USERNAME }}/${{ env.PROJECT_NAME }}
            
            # Login to GHCR to pull private packages
            echo "${{ secrets.GHCR_PAT }}" | docker login ${{ env.REGISTRY }} -u ${{ github.repository_owner }} --password-stdin
            
            # Create .env file for docker-compose
            echo "IMAGE_TAG=${{ github.sha }}" > .env
            echo "IMAGE_REGISTRY=${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}" >> .env

            # Pull the latest image and restart the service
            docker-compose pull backend
            docker-compose up -d --remove-orphans
            
            # Clean up
            docker image prune -af 