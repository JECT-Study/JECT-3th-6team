# Backend Development Rules for AI Agents

## Build and Development Commands

### Building and Running
- `./gradlew bootRun` - Run the Spring Boot application
- `./gradlew build` - Build the project
- `./gradlew clean build` - Clean and build the project

### Testing
- `./gradlew test` - Run all tests (configured for parallel execution)
- `./gradlew test --tests "com.example.demo.application.service.WaitingServiceTest"` - Run specific test class
- `./gradlew test --tests "*WaitingServiceTest.shouldCreateWaiting"` - Run specific test method

### Database Access
- H2 Console: `http://localhost:8080/h2-console` (when running locally)
- JDBC URL: `jdbc:h2:mem:testdb`, Username: `sa`, Password: (empty)

## Documentation Structure

This project maintains comprehensive documentation for AI agents and developers. **IMPORTANT**: All architectural and business logic information is documented in the `docs/` folder. AI agents should refer to these documents for implementation guidance.

### Architecture Documentation
- **[Backend Architecture Analysis](../docs/architecture/backend-architecture-analysis.md)**: Complete analysis of the hexagonal architecture implementation, including layer structure, domain models, and architectural patterns
- **[Code Conventions](../docs/architecture/code-conventions.md)**: Naming rules, import requirements, and coding standards for all layers

### Business Logic Documentation
- **[Notification Business Logic](../docs/business-logic/notification-business-logic.md)**: Immediate vs scheduled notifications, SSE and email delivery channels, trigger conditions and policies
- **[Popup Query Business Logic](../docs/business-logic/popup-query-business-logic.md)**: Popup filtering conditions, search constraints, and data transformations across layers
- **[Waiting Application Business Logic](../docs/business-logic/waiting-application-business-logic.md)**: 8-step waiting application process, validation rules, and failure scenarios
- **[Waiting Entry Business Logic](../docs/business-logic/waiting-entry-business-logic.md)**: Queue entry processing, status transitions, and number reordering logic
- **[OAuth2 Login Business Logic](../docs/business-logic/oauth2-login-business-logic.md)**: Kakao OAuth integration, token exchange, user registration/login flow

### Documentation Usage Guidelines

#### Architecture and Code Structure
- **Understanding System Architecture**: Read `docs/architecture/backend-architecture-analysis.md`
- **Following Naming Conventions**: Read `docs/architecture/code-conventions.md`
- **Understanding Layer Structure**: Read `docs/architecture/backend-architecture-analysis.md` (Layer Structure section)

#### Business Logic Implementation
- **Notification System Features**: Read `docs/business-logic/notification-business-logic.md`
- **Popup Search and Filtering**: Read `docs/business-logic/popup-query-business-logic.md`
- **Waiting Queue Application**: Read `docs/business-logic/waiting-application-business-logic.md`
- **Waiting Queue Entry Processing**: Read `docs/business-logic/waiting-entry-business-logic.md`
- **OAuth2 Authentication**: Read `docs/business-logic/oauth2-login-business-logic.md`

#### Debugging and Error Handling
- **Understanding Error Types**: Read `docs/architecture/backend-architecture-analysis.md` (Exception Handling section)
- **Business Logic Failures**: Check relevant business logic document for failure scenarios
- **Validation Errors**: Read `docs/architecture/backend-architecture-analysis.md` (Parameter Validation section)

#### Development Workflow
- **Before Implementing New Features**: Read relevant business logic document first
- **When Adding Business Logic Documentation**: Follow the format and structure of existing `docs/business-logic/*.md` files
- **When Modifying Architecture**: Update `docs/architecture/backend-architecture-analysis.md`

All detailed technical information, including architecture patterns, domain models, business rules, and implementation guidelines, can be found in the linked documentation files.