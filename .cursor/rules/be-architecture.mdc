---
description: 
globs: 
alwaysApply: true
---
# 📋 백엔드 Java Spring 패키지 구조 분석 결과

## 🏗️ **전체 아키텍처**

이 프로젝트는 **헥사고날 아키텍처(Hexagonal Architecture)**와 **도메인 주도 설계(DDD)** 원칙을 기반으로 설계된 **팝업 스토어 예약 서비스**입니다.

## 📁 **패키지 구조 개요**

```
backend/
├── src/main/java/com/example/demo/
│   ├── Demo2Application.java          # 메인 애플리케이션 클래스
│   ├── presentation/                  # 🌐 프레젠테이션 계층
│   │   ├── controller/               # REST API 컨트롤러
│   │   └── dto/                      # API 요청/응답 DTO
│   ├── application/                   # ⚙️ 애플리케이션 계층
│   │   ├── service/                  # 유스케이스 구현
│   │   ├── port/                     # 애플리케이션 포트 인터페이스
│   │   └── dto/                      # 유스케이스 DTO
│   ├── domain/                        # 🎯 도메인 계층
│   │   ├── model/                    # 도메인 엔티티와 값 객체
│   │   └── service/                  # 도메인 서비스
│   ├── infrastructure/                # 🔧 인프라스트럭처 계층
│   │   ├── persistence/              # 데이터베이스 연동
│   │   │   ├── entity/               # JPA 엔티티
│   │   │   ├── repository/           # Spring Data JPA Repository
│   │   │   └── adapter/              # 영속성 포트 구현체
│   │   └── external/                 # 외부 시스템 연동
│   ├── config/                        # ⚙️ 설정 계층
│   └── common/                        # 🔗 공통 유틸리티
│       ├── exception/                # 예외 클래스
│       └── util/                     # 유틸리티 클래스
└── src/main/resources/
    ├── application.yml               # 애플리케이션 설정
    ├── static/                       # 정적 리소스
    └── templates/                    # 템플릿 파일
```

## 🎯 **계층별 역할과 책임**

### 1. 🌐 **Presentation Layer (프레젠테이션 계층)**
- **위치**: `com.example.demo.presentation`
- **역할**: 외부 클라이언트와의 통신 담당
- **구성**:
  - `controller/`: REST API 컨트롤러
  - `dto/`: API 요청/응답 DTO
- **특징**: HTTP 요청을 애플리케이션 계층의 유스케이스로 변환

### 2. ⚙️ **Application Layer (애플리케이션 계층)**
- **위치**: `com.example.demo.application`
- **역할**: 유스케이스 구현 및 비즈니스 흐름 조정
- **구성**:
  - `service/`: 애플리케이션 서비스 (유스케이스 구현)
  - `port/`: 애플리케이션 포트 (인터페이스)
  - `dto/`: 유스케이스 DTO (Command, Response)
- **특징**: 의존성 역전 원칙(DIP) 준수, 트랜잭션 경계 관리

### 3. 🎯 **Domain Layer (도메인 계층)**
- **위치**: `com.example.demo.domain`
- **역할**: 순수한 비즈니스 로직 포함
- **구성**:
  - `model/`: 도메인 엔티티와 값 객체
  - `service/`: 도메인 서비스 (비즈니스 규칙과 로직)
- **특징**: 기술적 구현 세부사항 제외, POJO로 구현

### 4. 🔧 **Infrastructure Layer (인프라스트럭처 계층)**
- **위치**: `com.example.demo.infrastructure`
- **역할**: 외부 기술 의존성 구현
- **구성**:
  - `persistence/`: 데이터베이스 연동 구현
    - `entity/`: JPA 엔티티
    - `repository/`: Spring Data JPA Repository
    - `adapter/`: 영속성 포트 구현체
  - `external/`: 외부 시스템 연동 구현
- **특징**: 애플리케이션 포트 인터페이스 구현

### 5. ⚙️ **Config & Common (설정 및 공통)**
- **Config**: 애플리케이션 설정 및 빈 정의
- **Common**: 공통 유틸리티 및 예외 처리
  - `exception/`: 예외 클래스
  - `util/`: 유틸리티 클래스

## 🛠️ **기술 스택**

### **프레임워크 & 라이브러리**
- **Spring Boot**: 3.4.6
- **Java**: 21
- **Spring Data JPA**: 데이터 영속성
- **Spring Security**: 보안
- **Lombok**: 코드 간소화

### **데이터베이스**
- **H2 Database**: 인메모리 데이터베이스 (개발/테스트용)
- **JPA/Hibernate**: ORM

### **빌드 도구**
- **Gradle**: 의존성 관리 및 빌드

## 🏛️ **아키텍처 원칙**

### **의존성 규칙**
1. ✅ 바깥쪽 계층은 안쪽 계층에 의존 가능
2. ❌ 안쪽 계층은 바깥쪽 계층에 직접 의존 불가
3. 🔌 계층 간 통신은 인터페이스(포트)를 통해 수행

### **계층 의존성 흐름**
```
Presentation → Application → Domain
     ↓              ↓
Infrastructure ←────┘
```

## 🎯 **설계 특징**

1. **포트-어댑터 패턴**: 외부 의존성과의 결합도 최소화
2. **의존성 역전**: 비즈니스 로직이 기술적 세부사항에 의존하지 않음
3. **관심사 분리**: 각 계층이 명확한 책임을 가짐
4. **테스트 용이성**: 각 계층을 독립적으로 테스트 가능
5. **확장성**: 새로운 기능 추가 시 기존 코드 변경 최소화

이 구조는 **팝업 스토어 예약 서비스**를 위한 견고하고 확장 가능한 백엔드 시스템으로 설계되었으며, 클린 아키텍처의 원칙을 충실히 따르고 있습니다.